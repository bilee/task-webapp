import React, { useState, useRef } from 'react';
import { Plus, X, GripVertical, Tag, Calendar } from 'lucide-react';

const TaskApp = () => {
  const [tasks, setTasks] = useState([
    { id: 1, text: 'Complete project proposal', category: 'Work', completed: false },
    { id: 2, text: 'Buy groceries', category: 'Personal', completed: false },
    { id: 3, text: 'Call dentist', category: 'Health', completed: true }
  ]);
  
  const [categories, setCategories] = useState(['Work', 'Personal', 'Health', 'Shopping']);
  const [newTask, setNewTask] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('Personal');
  const [newCategory, setNewCategory] = useState('');
  const [showCategoryInput, setShowCategoryInput] = useState(false);
  const [draggedTask, setDraggedTask] = useState(null);
  const [dragOverIndex, setDragOverIndex] = useState(null);

  const dragItem = useRef(null);
  const dragOverItem = useRef(null);

  const addTask = () => {
    if (newTask.trim()) {
      const task = {
        id: Date.now(),
        text: newTask,
        category: selectedCategory,
        completed: false
      };
      setTasks([...tasks, task]);
      setNewTask('');
    }
  };

  const deleteTask = (id) => {
    setTasks(tasks.filter(task => task.id !== id));
  };

  const toggleTask = (id) => {
    setTasks(tasks.map(task => 
      task.id === id ? { ...task, completed: !task.completed } : task
    ));
  };

  const addCategory = () => {
    if (newCategory.trim() && !categories.includes(newCategory)) {
      setCategories([...categories, newCategory]);
      setNewCategory('');
      setShowCategoryInput(false);
    }
  };

  const handleDragStart = (e, index) => {
    dragItem.current = index;
    setDraggedTask(index);
    e.target.style.opacity = '0.5';
  };

  const handleDragEnd = (e) => {
    e.target.style.opacity = '1';
    setDraggedTask(null);
    setDragOverIndex(null);
    dragItem.current = null;
    dragOverItem.current = null;
  };

  const handleDragOver = (e, index) => {
    e.preventDefault();
    setDragOverIndex(index);
    dragOverItem.current = index;
  };

  const handleDrop = (e) => {
    e.preventDefault();
    const dragItemIndex = dragItem.current;
    const dragOverItemIndex = dragOverItem.current;

    if (dragItemIndex !== null && dragOverItemIndex !== null && dragItemIndex !== dragOverItemIndex) {
      const newTasks = [...tasks];
      const draggedItem = newTasks[dragItemIndex];
      newTasks.splice(dragItemIndex, 1);
      newTasks.splice(dragOverItemIndex, 0, draggedItem);
      setTasks(newTasks);
    }
  };

  const getCategoryColor = (category) => {
    const colors = {
      'Work': 'bg-blue-100 text-blue-800 border-blue-200',
      'Personal': 'bg-green-100 text-green-800 border-green-200',
      'Health': 'bg-red-100 text-red-800 border-red-200',
      'Shopping': 'bg-purple-100 text-purple-800 border-purple-200'
    };
    return colors[category] || 'bg-gray-100 text-gray-800 border-gray-200';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-cyan-50">
      <div className="max-w-2xl mx-auto p-6">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-2">Task Manager</h1>
          <p className="text-gray-600">Organize your life, one task at a time</p>
        </div>

        {/* Add Task Section */}
        <div className="bg-white rounded-2xl shadow-lg p-6 mb-6 border border-gray-100">
          <div className="flex gap-3 mb-4">
            <input
              type="text"
              value={newTask}
              onChange={(e) => setNewTask(e.target.value)}
              placeholder="Add a new task..."
              className="flex-1 px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent outline-none transition-all"
              onKeyPress={(e) => e.key === 'Enter' && addTask()}
            />
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent outline-none"
            >
              {categories.map(cat => (
                <option key={cat} value={cat}>{cat}</option>
              ))}
            </select>
            <button
              onClick={addTask}
              className="px-6 py-3 bg-gradient-to-r from-indigo-500 to-purple-600 text-white rounded-xl hover:from-indigo-600 hover:to-purple-700 transition-all transform hover:scale-105 shadow-lg"
            >
              <Plus size={20} />
            </button>
          </div>

          {/* Category Management */}
          <div className="flex flex-wrap gap-2 items-center">
            <span className="text-sm text-gray-600 flex items-center gap-1">
              <Tag size={16} />
              Categories:
            </span>
            {categories.map(cat => (
              <span key={cat} className={`px-3 py-1 rounded-full text-xs font-medium border ${getCategoryColor(cat)}`}>
                {cat}
              </span>
            ))}
            {!showCategoryInput ? (
              <button
                onClick={() => setShowCategoryInput(true)}
                className="px-3 py-1 text-xs text-indigo-600 hover:text-indigo-800 border border-indigo-200 rounded-full hover:bg-indigo-50 transition-colors"
              >
                + Add Category
              </button>
            ) : (
              <div className="flex gap-2">
                <input
                  type="text"
                  value={newCategory}
                  onChange={(e) => setNewCategory(e.target.value)}
                  placeholder="Category name"
                  className="px-2 py-1 text-xs border border-gray-200 rounded-lg focus:outline-none focus:ring-1 focus:ring-indigo-500"
                  onKeyPress={(e) => e.key === 'Enter' && addCategory()}
                />
                <button
                  onClick={addCategory}
                  className="px-2 py-1 text-xs bg-indigo-500 text-white rounded-lg hover:bg-indigo-600"
                >
                  Add
                </button>
                <button
                  onClick={() => {setShowCategoryInput(false); setNewCategory('');}}
                  className="px-2 py-1 text-xs text-gray-500 hover:text-gray-700"
                >
                  Cancel
                </button>
              </div>
            )}
          </div>
        </div>

        {/* Tasks List */}
        <div className="space-y-3">
          {tasks.length === 0 ? (
            <div className="text-center py-12 text-gray-500">
              <Calendar size={48} className="mx-auto mb-4 opacity-50" />
              <p>No tasks yet. Add one above to get started!</p>
            </div>
          ) : (
            tasks.map((task, index) => (
              <div
                key={task.id}
                draggable
                onDragStart={(e) => handleDragStart(e, index)}
                onDragEnd={handleDragEnd}
                onDragOver={(e) => handleDragOver(e, index)}
                onDrop={handleDrop}
                className={`bg-white rounded-xl shadow-md border border-gray-100 p-4 transition-all hover:shadow-lg cursor-move ${
                  draggedTask === index ? 'opacity-50 scale-95' : ''
                } ${
                  dragOverIndex === index ? 'border-indigo-300 shadow-lg' : ''
                }`}
              >
                <div className="flex items-center gap-3">
                  <div className="cursor-grab hover:cursor-grabbing text-gray-400 hover:text-gray-600">
                    <GripVertical size={18} />
                  </div>
                  
                  <input
                    type="checkbox"
                    checked={task.completed}
                    onChange={() => toggleTask(task.id)}
                    className="w-5 h-5 text-indigo-600 rounded focus:ring-indigo-500 focus:ring-2"
                  />
                  
                  <div className="flex-1">
                    <p className={`font-medium ${task.completed ? 'line-through text-gray-500' : 'text-gray-800'}`}>
                      {task.text}
                    </p>
                    <span className={`inline-block mt-1 px-2 py-1 text-xs font-medium rounded-full border ${getCategoryColor(task.category)}`}>
                      {task.category}
                    </span>
                  </div>
                  
                  <button
                    onClick={() => deleteTask(task.id)}
                    className="text-gray-400 hover:text-red-500 transition-colors p-1 hover:bg-red-50 rounded-lg"
                  >
                    <X size={18} />
                  </button>
                </div>
              </div>
            ))
          )}
        </div>

        {/* Stats */}
        {tasks.length > 0 && (
          <div className="mt-8 bg-white rounded-2xl shadow-lg p-6 border border-gray-100">
            <div className="grid grid-cols-3 gap-4 text-center">
              <div>
                <p className="text-2xl font-bold text-indigo-600">{tasks.length}</p>
                <p className="text-sm text-gray-600">Total Tasks</p>
              </div>
              <div>
                <p className="text-2xl font-bold text-green-600">{tasks.filter(t => t.completed).length}</p>
                <p className="text-sm text-gray-600">Completed</p>
              </div>
              <div>
                <p className="text-2xl font-bold text-orange-600">{tasks.filter(t => !t.completed).length}</p>
                <p className="text-sm text-gray-600">Remaining</p>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default TaskApp;
